package main

import (
	"fmt"
	"log"
	"os"
	"strconv"
)

func main() {
	if err := run(); err != nil {
		log.Fatalln(err)
	}
}

func run() error {
	emojis, err := fetchEmojis()
	if err != nil {
		return err
	}

	version, err := strconv.ParseFloat(os.Args[1], 32)
	if err != nil {
		return err
	}

	emojis = filterVersion(emojis, float32(version))

	if err := generateConstants(emojis); err != nil {
		return err
	}

	if err := generateSet(emojis); err != nil {
		return err
	}

	log.Println("done")

	return nil
}

func generateConstants(emojis []gemoji) error {
	log.Println("generating emojis.go")

	file, err := os.Create("emojis.go")
	if err != nil {
		return err
	}

	_, err = fmt.Fprint(file, "package emoji\n\n"+
		"// Code generated by tools/codegen/emoji. DO NOT EDIT.\n\n"+
		"var (")
	if err != nil {
		return err
	}

	var category string

	for _, emoji := range emojis {
		if category != emoji.Category {
			_, err := fmt.Fprintf(file,
				"\n    // ================================ %s ================================\n\n", emoji.Category)
			if err != nil {
				return err
			}

			category = emoji.Category
		}

		name := genName(emoji.Description)

		if emoji.SkinTones {
			_, err := fmt.Fprintf(file,
				"    %s = SkinToneEmoji{\n"+
					"        NeutralSkin:     \"%s\",\n"+
					"        LightSkin:       \"%s\",\n"+
					"        MediumLightSkin: \"%s\",\n"+
					"        MediumSkin:      \"%s\",\n"+
					"        MediumDarkSkin:  \"%s\",\n"+
					"        DarkSkin:        \"%s\",\n"+
					"    }\n",
				name,
				escapedUnicodeSequence(emoji.Emoji),
				escapedUnicodeSequence(withSkinTone(emoji.Emoji, lightSkin)),
				escapedUnicodeSequence(withSkinTone(emoji.Emoji, mediumLightSkin)),
				escapedUnicodeSequence(withSkinTone(emoji.Emoji, mediumSkin)),
				escapedUnicodeSequence(withSkinTone(emoji.Emoji, mediumDarkSkin)),
				escapedUnicodeSequence(withSkinTone(emoji.Emoji, darkSkin)))
			if err != nil {
				return err
			}
		} else {
			_, err := fmt.Fprintf(file, "    %s Emoji = \"%s\"\n",
				name, escapedUnicodeSequence(emoji.Emoji))
			if err != nil {
				return err
			}
		}
	}

	_, err = fmt.Fprintf(file, ")")
	if err != nil {
		return err
	}

	return file.Close()
}

func generateSet(emojis []gemoji) error {
	log.Println("generating emoji_set.go")

	file, err := os.Create("emoji_set.go")
	if err != nil {
		return err
	}

	_, err = fmt.Fprint(file, "package emoji\n\n"+
		"// Code generated by tools/codegen/emoji. DO NOT EDIT.\n\n"+
		"var emojis = map[Emoji]struct{}{\n")
	if err != nil {
		return err
	}

	for _, emoji := range emojis {
		name := genName(emoji.Description)

		if emoji.SkinTones {
			_, err := fmt.Fprintf(file,
				"    %s.NeutralSkin: {},\n"+
					"    %s.LightSkin: {},\n"+
					"    %s.MediumLightSkin: {},\n"+
					"    %s.MediumSkin: {},\n"+
					"    %s.MediumDarkSkin: {},\n"+
					"    %s.DarkSkin: {},\n",
				name, name, name, name, name, name)
			if err != nil {
				return err
			}
		} else {
			_, err := fmt.Fprintf(file, "    %s: {},\n", name)
			if err != nil {
				return err
			}
		}
	}

	_, err = fmt.Fprintf(file, "}")
	if err != nil {
		return err
	}

	return file.Close()
}
